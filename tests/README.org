#+title: Ollama Buddy: Testing
#+author: James Dyer
#+email: captainflasmr@gmail.com
#+language: en
#+options: ':t toc:nil author:nil email:nil num:nil title:nil
#+todo: TODO DOING | DONE
#+startup: showall

* Ollama Buddy Testing Process/Strategy

This file contains a description of my testing strategy for the =ollama-buddy= Emacs package and the tests directory includes local unit tests and files to aid in robustly testing before pushing to =github= https://github.com/captainflasmr/ollama-buddy and then on to MELPA.

** Validate/lint elisp

- Run =checkdoc=
- =byte-compile= on ollama-buddy.el
- =flycheck= on ollama-buddy.el
- =package-lint= on ollama-buddy.el
- Possibly =melpazoid= (if I can be bothered!)

** Batch-byte-compile

#+begin_src bash
#!/bin/bash

# List of elisp files to compile
elisp_files=(
  "ollama-buddy-awesome.el"
  "ollama-buddy-claude.el"
  "ollama-buddy-core.el"
  "ollama-buddy.el"
  "ollama-buddy-fabric.el"
  "ollama-buddy-gemini.el"
  "ollama-buddy-openai.el"
  "ollama-buddy-transient.el"
)

# Directory above current one
elisp_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

for el in "${elisp_files[@]}"; do
  emacs -Q --batch \
    --eval "(add-to-list 'load-path \"$elisp_dir\")" \
    -f batch-byte-compile "$elisp_dir/$el"
done
#+end_src

** Run ollama-buddy with different Emacs versions

- [X] emacs-28.1
- [X] emacs-29.3
- [X] emacs-29.4
- [X] emacs-30.1

Using the following script to generate a very simple init.el file which is then run up against varying versions of Emacs to then run up =ollama-buddy= using =C-c o= and perform some quick tests.

#+begin_src bash
#!/bin/bash

# Script to test ollama-buddy package in a vanilla Emacs environment
# Usage: ./test-ollama-buddy.sh [emacs-version]
# Example: ./test-ollama-buddy.sh 29.3

# Default Emacs version if none specified
VERSION=${1:-"28.2"}
PACKAGE_PATH="~/source/repos/ollama-buddy"

# Create a temporary directory for the test
TEMP_DIR=$(mktemp -d -t ollama-buddy-test-XXXXXX)
INIT_FILE="$TEMP_DIR/init.el"

# Create a minimal init.el file
cat > "$INIT_FILE" << EOF
;; Minimal init.el for testing ollama-buddy (offline version)

;; Add the package to the load path
(add-to-list 'load-path "$PACKAGE_PATH")

;; Load the package
(require 'ollama-buddy)
(require 'ollama-buddy-transient)

;; Add the key binding
(global-set-key (kbd "C-c o") 'ollama-buddy-menu)
(global-set-key (kbd "C-c O") 'ollama-buddy-transient-menu-wrapper)

;; Show a message to confirm we're in test mode
(message "Testing ollama-buddy in vanilla Emacs %s" emacs-version)
EOF

# Run Emacs with the temporary init file
echo "Starting Emacs $VERSION with minimal configuration..."
echo "Testing ollama-buddy from: $PACKAGE_PATH"
echo "Temporary init file: $INIT_FILE"

# Run the appropriate Emacs version
"$HOME/bin/emacs-$VERSION" -Q -l "$INIT_FILE"

# Cleanup
echo "Cleaning up temporary directory..."
rm -rf "$TEMP_DIR"
#+end_src

The script to build different versions of Emacs is as follows:

#+begin_src bash
#!/bin/bash

# Directory for Emacs builds
BUILD_ROOT="$HOME/emacs-builds"
INSTALL_ROOT="$HOME/emacs-versions"

# Build dependencies for different distributions
ARCH_BUILD_DEPS="base-devel gtk2 gtk3 libxpm libjpeg-turbo libpng libtiff giflib libxml2 gnutls librsvg"
SLES_BUILD_DEPS="gcc gcc-c++ make automake gtk2-devel gtk3-devel libXpm-devel libjpeg8-devel libpng16-devel libtiff-devel giflib-devel libxml2-devel gnutls-devel cairo-devel harfbuzz-devel librsvg-devel"

# 27.2 2021-03-25
# 28.2 2022-09-12
# 29.4 2024-06-22
VERSIONS=(
    # "emacs-27.1"
    # "emacs-28.1"
    # "emacs-29.1"
    "emacs-29.3"
    # "emacs-29.4"
    "emacs-30.1"
)

# Detect OS
detect_os() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
    else
        OS=$(uname -s)
    fi
}

function prepare_environment() {
    echo "Creating build directories..."
    mkdir -p "$BUILD_ROOT"
    mkdir -p "$INSTALL_ROOT"
    
    detect_os
    echo "Detected OS: $OS"
    
    case "$OS" in
        ,*"SLED"*|"SLES"*|*"SUSE"*)
            echo "Installing build dependencies for SUSE SLES..."
            sudo zypper refresh
            sudo zypper install -y pattern-devel-base-devel
            sudo zypper install -y $SLES_BUILD_DEPS
            ;;
        ,*"Garuda"*)
            echo "Installing build dependencies for Arch Linux..."
            sudo pacman -Syu --needed --noconfirm $ARCH_BUILD_DEPS
            
            # Check if we have yay for AUR access (optional)
            if ! command -v yay &> /dev/null; then
                echo "Installing yay (AUR helper)..."
                cd /tmp
                git clone https://aur.archlinux.org/yay.git
                cd yay
                makepkg -si --noconfirm
            fi
            ;;
        ,*)
            echo "Unsupported OS detected: $OS"
            echo "Please install build dependencies manually and continue."
            read -p "Press Enter to continue or Ctrl+C to abort..."
            ;;
    esac
}

function build_emacs() {
    local version=$1
    local build_dir="$BUILD_ROOT/$version"
    local install_dir="$INSTALL_ROOT/$version"
    
    echo "Building $version..."
    
    # Download and extract
    cd "$BUILD_ROOT"
    if [ ! -f "$version.tar.gz" ]; then
        wget "https://ftp.gnu.org/gnu/emacs/$version.tar.gz"
    fi
    
    # Clean previous build if exists
    rm -rf "$build_dir"
    tar xzf "$version.tar.gz"
    
    # Configure and build
    cd "$version"
    
    # Different configure flags for different versions
    if [[ "$version" == "emacs-24.5" || "$version" == "emacs-25.3" ]]; then
        # Older versions use GTK2
        ./configure \
            --prefix="$install_dir" \
            --with-x-toolkit=gtk2 \
            --with-xpm \
            --with-jpeg \
            --with-png \
            --with-gif \
            --with-tiff \
            --with-gnutls \
            --with-xml2 \
            --with-rsvg
    else
        # Newer versions use GTK3
        ./configure \
            --prefix="$install_dir" \
            --with-x-toolkit=gtk3 \
            --with-xpm \
            --with-jpeg \
            --with-png \
            --with-gif \
            --with-tiff \
            --with-gnutls \
            --with-xml2 \
            --with-cairo \
            --with-harfbuzz \
            --with-rsvg
    fi
    
    # Use all available cores for compilation
    make -j$(nproc)
    make install
    
    echo "$version installed to $install_dir"
}

function create_pkgbuild() {
    # Only create PKGBUILD for Arch Linux
    if [[ "$OS" != *"Arch Linux"* ]]; then
        echo "PKGBUILD creation is only supported on Arch Linux"
        return 1
    fi

    local version=$1
    local version_num=${version#emacs-}
    
    echo "Creating PKGBUILD for $version..."
    mkdir -p "$BUILD_ROOT/pkgbuilds/$version"
    cd "$BUILD_ROOT/pkgbuilds/$version"
    
    cat > PKGBUILD << EOF
# Maintainer: Your Name <your.email@example.com>
pkgname=$version
pkgver=$version_num
pkgrel=1
pkgdesc="GNU Emacs version $version_num"
arch=('x86_64')
url="https://www.gnu.org/software/emacs/"
license=('GPL3')
depends=('gtk3' 'libxpm' 'libjpeg-turbo' 'libpng' 'giflib' 'libtiff' 'libxml2' 'gnutls')
makedepends=('base-devel')
provides=("emacs-$version_num")
conflicts=("emacs")
source=("https://ftp.gnu.org/gnu/emacs/emacs-\$pkgver.tar.gz")
sha256sums=('SKIP')

build() {
    cd "\$srcdir/emacs-\$pkgver"
    ./configure \\
        --prefix=/usr \\
        --sysconfdir=/etc \\
        --libexecdir=/usr/lib \\
        --localstatedir=/var \\
        --with-x-toolkit=gtk3 \\
        --with-xpm \\
        --with-jpeg \\
        --with-png \\
        --with-gif \\
        --with-tiff \\
        --with-gnutls \\
        --with-xml2
    make
}

package() {
    cd "\$srcdir/emacs-\$pkgver"
    make DESTDIR="\$pkgdir" install
}
EOF
}

# Main execution
echo "This script provides two methods to build Emacs:"
echo "1. Direct compilation (traditional)"
echo "2. Using makepkg (Arch Linux only)"
read -p "Which method do you prefer? (1/2): " build_method

case $build_method in
    1)
        prepare_environment
        for version in "${VERSIONS[@]}"; do
            build_emacs "$version"
        done
        
        # Create convenience symlinks
        mkdir -p "$HOME/bin"
        echo "Creating version-specific symlinks..."
        for version in "${VERSIONS[@]}"; do
            ln -sf "$INSTALL_ROOT/$version/bin/emacs" "$HOME/bin/emacs-${version#emacs-}"
        done
        ;;
        
    2)
        detect_os
        if [[ "$OS" != *"Arch Linux"* ]]; then
            echo "makepkg method is only supported on Arch Linux"
            exit 1
        fi
        prepare_environment
        for version in "${VERSIONS[@]}"; do
            create_pkgbuild "$version"
            echo "PKGBUILD created for $version"
            echo "To build, cd to $BUILD_ROOT/pkgbuilds/$version and run 'makepkg -si'"
        done
        ;;
        
    ,*)
        echo "Invalid option selected"
        exit 1
        ;;
esac

echo "Build complete. You can run specific versions using:"
for version in "${VERSIONS[@]}"; do
    echo "emacs-${version#emacs-}"
done
#+end_src

** Prompt Text Edge Cases

Sending weird characters in the file =prompt-edge-text-cases.txt= with various edge cases and challenging content to test =ollama-buddy= text handling capabilities.

This test text src includes:

- Various Unicode and special characters
- Different types of quotation marks
- Mixed programming syntax
- Emojis and complex Unicode symbols
- Different line endings
- Shell commands with special characters
- SQL queries with mixed quotes
- URLs and file paths
- Mixed language content
- JSON-like structures

** Prompting

*** Bad Sentence

*This aint a good sentence, pleez rewrite!*

*** Temperature

*This aint a good sentence, pleez rewrite!*

Temperature 0.0:

Very pricise proofreading, typically only a single concise sentence.

Temperature to 2.0:

More casual, with a slangish alternative given.

*** History/context

History turned on:

*What is the capital of the UK?*

*and of France*

Now turn off History:

*and of Germany*

*** elisp structure to org-table

Given the following elisp data structure can you extract out an org table that contains the following columns : key : description : model

#+begin_src elisp
(setq ollama-buddy-command-definitions
      '(
        ;; General Commands
        (open-chat
         :key ?o
         :description "Open chat buffer"
         :action ollama-buddy--open-chat)
        
        (swap-model
         :key ?m
         :description "Swap model"
         :action ollama-buddy--swap-model)
        
        (send-region
         :key ?l
         :description "Send region"
         :action (lambda () (ollama-buddy--send-with-command 'send-region)))
        
        (describe-code
         :key ?c
         :description "Describe code"
         :model "qwen2.5-coder:3b"
         :prompt "describe the following code:"
         :action (lambda () (ollama-buddy--send-with-command 'describe-code)))
        
        (dictionary-lookup
         :key ?d
         :description "Dictionary Lookup"
         :model "llama3.2:1b"
         :prompt "For the following word provide a typical dictionary definition:"
         :action (lambda () (ollama-buddy--send-with-command 'dictionary-lookup)))
        
        (quit
         :key ?q
         :description "Quit"
         :action (lambda () (message "Quit Ollama Shell menu.")))
        )
      )
#+end_src

**** expected output

| Key | Description        | Model            |
|-----+--------------------+------------------|
| o   | Open chat buffer   |                  |
| m   | Swap model         |                  |
| l   | Send region        |                  |
| c   | Describe code      | qwen2.5-coder:3b |
| d   | Dictionary Lookup  | llama3.2:1b      |
| q   | Quit               |                  |
      
** Menu testing

Open up =leagues.txt=, select/mark any text, open up =ollama-buddy-menu= and test pushing given different prompting to the chat buffer.

** Run with test server (without ollama)

There is a test server written in python that can simulate many =ollama= responses so =ollama-buddy= can now be tested completely offline and of course the JSON explicitly inspected.

See =server.py= and run with:

~python3 ./server.py~

** ERT Unit Testing

To run these tests, you'll need:

1. Emacs (26.1 or higher)
2. The main package files
3. The test files in this directory

*** Running Tests

You can run all tests with (from the top level of this repo):

#+begin_src bash
make test
#+end_src

To run a specific test:

#+begin_src bash
make test-NAME
#+end_src

Replace =NAME= with the name of the test tag or test function.

*** Test Files

- =ollama-buddy-test.el= - Main test file containing all unit tests
- =savehist-mock.el= - Mock implementation of savehist for testing

*** Mock Setup

The tests use mocks to avoid making real network calls to the Ollama server:

- Network functions are mocked using =advice-add=
- Mock data is provided for models and API responses
- UI interactions are tested in temporary buffers

*** Adding New Tests

When adding new tests:
1. Use the =ert-deftest= macro to define your test
2. Group related tests with tags
3. Add appropriate mocks for external dependencies
4. Use the =ollama-buddy-test--with-mock-buffer= macro for UI tests
